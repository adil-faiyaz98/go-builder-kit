name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # Lint job disabled
  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: "1.21"
  #         cache: true

  #     - name: Install golangci-lint
  #       run: |
  #         curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
  #         golangci-lint --version

  #     - name: Run golangci-lint
  #       run: golangci-lint run --timeout=5m --skip-dirs=cmd

  #     - name: Check for ineffective assignments
  #       run: go install github.com/gordonklaus/ineffassign@latest && ineffassign ./...

  #     - name: Check for misspellings
  #       run: go install github.com/client9/misspell/cmd/misspell@latest && misspell -error .

  #     - name: Check for code formatting
  #       run: |
  #         go install mvdan.cc/gofumpt@v0.4.0
  #         test -z "$(gofumpt -l -d .)"

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Run tests with coverage
        run: go test -race -coverprofile=coverage.txt -covermode=atomic ./models/... ./builders/... ./pkg/... ./tests/...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Run gosec
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -no-fail -fmt=sarif -out=gosec.sarif ./models/... ./builders/... ./pkg/...

      # Skipping SARIF upload due to permission issues
      # - name: Upload gosec report
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: gosec.sarif
      #     wait-for-processing: true

      - name: Run nancy for dependency scanning
        run: |
          go list -json -deps ./... | go install github.com/sonatype-nexus-community/nancy@latest && nancy sleuth --no-color

      # Govulncheck disabled
      # - name: Run govulncheck
      #   run: |
      #     go install golang.org/x/vuln/cmd/govulncheck@latest
      #     govulncheck ./models/... ./builders/... ./pkg/...

  compatibility:
    name: Compatibility
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.19", "1.20", "1.21"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Run tests
        run: go test ./models/... ./builders/... ./pkg/... ./tests/...

  performance:
    name: Performance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Run performance tests
        run: go test -bench=. -benchmem ./models/... ./builders/... ./pkg/... ./tests/...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, security, compatibility, performance]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Build
        run: go build -v ./models/... ./builders/... ./pkg/...

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Go pkg.go.dev
        run: |
          go list -m github.com/adil-faiyaz98/go-builder-kit@${{ github.ref_name }}

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Generate documentation
        run: |
          go install golang.org/x/tools/cmd/godoc@latest
          mkdir -p docs
          godoc -html -url=/pkg/github.com/adil-faiyaz98/go-builder-kit > docs/index.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
